#!/usr/bin/env perl

use strict;
use warnings;
use threads;
use threads::shared;

use Carp;
use Getopt::Long qw(:config posix_default no_ignore_case bundling pass_through);

use FindBin;
use lib ("$FindBin::Bin/PerlLib");
use GFF3_alignment_utils;
use GTF_alignment_utils;
use Overlap_piler;
use SingleLinkageClusterer;
use CDNA::PASA_alignment_assembler;
use CDNA::Genome_based_cDNA_assembler;
use Overlap_info;
use List::Util qw(min max);
use Gene_obj_indexer;

use Thread_helper;


$ENV{PATH} = "$FindBin::Bin/bin:$ENV{PATH}";

my $help_flag;


my $usage = <<__EOUSAGE__;

#####################################################################
#
#  usage: $0 [opts] pasa_lite.valid_alignments.gtf
#
#
#  Optional:
#
#   --CPU <int>                          : max number of concurrent threads (default: 2)
#
#   --out_prefix <string>                : prefix for output file names (default: 'pasa_lite')
#
#   --min_pct_iso_shared_sequence <int>  : minimum percent of shared exon shared between two isoforms
#                                          to be joined into the same gene cluster.
#                                          min_pct = ( shared_seq_len / shorter_isoform_len) * 100
#                                          (default: 20)
#
#  Note: As is the PASA tradition, spliced transcripts having non-consensus dinucleotide splice sites
#        are  treated as invalid.   (accepted pairs restricted to: GT-AG, GC-AG, and AT-AC)
#
#
######################################################################################################



__EOUSAGE__

    ;



my $out_prefix = "pasa_lite";
my $MIN_PCT_OVERLAP = 20;
my $CPU = 2;

&GetOptions ( 'h' => \$help_flag,
              'out_prefix=s' => \$out_prefix,
              'min_pct_iso_shared_sequence=i' => \$MIN_PCT_OVERLAP,
              'CPU=i' => \$CPU,
              
    );


my @unrecognized_args = grep { ! /\.(gtf|gff3)$/ } @ARGV;

if (@unrecognized_args) {
    die "Error, don't recognize arguments: [@unrecognized_args] as prog options or gtf, gff3 files... ";
}

my @gxf_files = @ARGV;


if ($help_flag) {
    die $usage;
}

unless (@gxf_files) {
    die $usage;
}


my $assembled_lock : shared;




main: {

    my $tmp_db = "tmp.$$.inx";
        
    my %cdna_alignments;
    my %scaff_to_cdna_list;
    
  index_alignments: {
      
      my $cdna_alignments_indexer = new Gene_obj_indexer( { create => $tmp_db } );
      
      foreach my $gxf_file (@gxf_files) {
        print STDERR "-parsing $gxf_file\n";
        &add_cdna_alignments($gxf_file, $cdna_alignments_indexer, \%scaff_to_cdna_list);
      }
    }
    
    ## Perform validations, assign spliced orientation
        
    open (my $ofh_assembled_alignments, ">$out_prefix.pasa_assembled_alignments.gtf") or die $!;
    my $stdout = select $ofh_assembled_alignments;
    $|=1;

    select $stdout;
    
    
    my $thread_helper = new Thread_helper($CPU);

    foreach my $scaff (keys %scaff_to_cdna_list) {
        
        my $cdna_ids_aref = $scaff_to_cdna_list{$scaff};
        
        $thread_helper->wait_for_open_thread();

        my $thread = threads->create('run_pasa', $scaff, $cdna_ids_aref, $tmp_db, $ofh_assembled_alignments);
        $thread_helper->add_thread($thread);
    }
    
    $thread_helper->wait_for_all_threads_to_complete();

    # close ofhs
    close $ofh_assembled_alignments;

    unlink($tmp_db);
    
    my @failures = $thread_helper->get_failed_threads();
        
    if (@failures) {
        
        use Data::Dumper;
        print STDERR "Failed threads: " . Dumper(\@failures);
        
        die " errors encountered ";
        
    }
    else {
        print STDERR "\nAssembly complete. :)  \n\n";
    }
    
        
    exit(0);
    
    
}


####
sub run_pasa {
    my ($scaff, $cdna_ids_aref, $tmp_db, $ofh_assembled_alignments) = @_;

    print STDERR "-assembling alignments on $scaff\n";
        
    my $cdna_alignments_indexer = new Gene_obj_indexer( { 'use' => $tmp_db } );
    
    my @clustered_isoforms = &cluster_transcripts($cdna_ids_aref, $cdna_alignments_indexer);
    
    my %seen;
    
    my $gene_counter = 0;

    foreach my $cluster (@clustered_isoforms) {
        my @trans_ids = @$cluster;
        
        my @cdna_alignments_to_assemble;
        foreach my $trans_id (@trans_ids) {
            my $cdna_alignment_obj = $cdna_alignments_indexer->get_gene($trans_id);
            
            push (@cdna_alignments_to_assemble, $cdna_alignment_obj);
                                    
            $seen{$trans_id} = 1; # track as clustered
        }
        

        my $assembler = new CDNA::PASA_alignment_assembler();
        
        $assembler->assemble_alignments(@cdna_alignments_to_assemble);
        
        #print $assembler->toAlignIllustration(80);
        #print "\n\n\n";
        
        my @assemblies = $assembler->get_assemblies();
        
        my @clustered_assemblies = &cluster_assemblies_via_exon_overlap(@assemblies);
        
        foreach my $assembly_set (@clustered_assemblies) {
            
            $gene_counter++; # ensure each assembly set shares the same gene ID
            
            if (scalar @$assembly_set > 1) {
                print STDERR "******  Got Alt splicing involving: " . scalar(@$assembly_set) . " transcripts\n";
                
                my $assembler = new CDNA::Genome_based_cDNA_assembler;
                $assembler->{incoming_alignments} = [@$assembly_set];
                $assembler->{assemblies} = [@$assembly_set];
                print STDERR $assembler->toAlignIllustration();
                
                
            }
            
            my $iso_counter = 0;
            
            foreach my $assembly (@$assembly_set) {
                
                $iso_counter++;
                
                my $acc = $assembly->get_acc();
                $assembly->{genome_acc} = $scaff;
                
                print "ASSEMBLY: " . $assembly->toToken() . "\t$acc\n";
                
                lock $assembled_lock;
                
                
                my $trans_id = "$scaff.g$gene_counter.i$iso_counter";
                
                print $ofh_assembled_alignments "# $trans_id => $acc " . $assembly->toToken() . "\n"
                    . $assembly->to_GTF_format(gene_id => "$scaff.g$gene_counter",
                                               transcript_id => $trans_id,
                    ) 
                    . "\n";
            }
        }
    }
        
    
    ## Report those singletons that do not require assembly
  singletons: {
      
      foreach my $cdna_acc (@$cdna_ids_aref) {
          
          unless ($seen{$cdna_acc}) {
            
              $gene_counter++;
              
              my $cdna_alignment_obj = $cdna_alignments_indexer->get_gene($cdna_acc);
              
              
              lock $assembled_lock;
              
              print $ofh_assembled_alignments "# $cdna_acc " . $cdna_alignment_obj->toToken() . "\n"
                  . $cdna_alignment_obj->to_GTF_format(gene_id => "$scaff.g$gene_counter") . "\n";
          }
          
          
      }
      
    }
    
    return;
}



####
sub add_cdna_alignments {
    my ($gxf_file, $cdna_alignments_href, $scaff_to_cdna_list_href) = @_;
    
    my %local_scaff_to_gene_list;

    if ($gxf_file =~ /\.gtf$/i) {
        %local_scaff_to_gene_list = &GTF_alignment_utils::index_alignment_objs($gxf_file, $cdna_alignments_href);
    }
    elsif ($gxf_file =~ /\.gff3$/i) {
        %local_scaff_to_gene_list = &GFF3_alignment_utils::index_alignment_objs($gxf_file, $cdna_alignments_href);
    }

    ## tack them on to our master list
    foreach my $scaff (keys %local_scaff_to_gene_list) {
        my @ids = @{$local_scaff_to_gene_list{$scaff}};
        
        push (@{$scaff_to_cdna_list_href->{$scaff}}, @ids);
    }
    
    return;
}
        

####
sub cluster_transcripts {
    my ($cdna_ids_aref, $cdna_alignment_indexer) = @_;

    my $overlap_piler = new Overlap_piler();
    
    foreach my $cdna_acc (@$cdna_ids_aref) {
        
        my $alignment_obj = $cdna_alignment_indexer->get_gene($cdna_acc);
        
        my @segments = $alignment_obj->get_alignment_segments();
        foreach my $segment (@segments) {
            my ($lend, $rend) = $segment->get_coords();
            $overlap_piler->add_coordSet($cdna_acc, $lend, $rend);
        }
    }

    my @clustered_accs = $overlap_piler->build_clusters();

    
    my @pairs;
    
    foreach my $cluster (@clustered_accs) {
        for (my $i = 1; $i <= $#$cluster; $i++) {
            my $prev = $cluster->[$i-1];
            my $curr = $cluster->[$i];
            
            push (@pairs, [$prev, $curr]);
        }
    }
    
    my @sl_clusters = &SingleLinkageClusterer::build_clusters(@pairs);
    
    return(@sl_clusters);
}


####
sub cluster_assemblies_via_exon_overlap {
    my (@assemblies) = @_;

    if (scalar @assemblies == 1) {
        # return a cluster of size 1.
        my @clusters = ([@assemblies]);
        return(@clusters);
    }
    
    ## multiple assemblies to test as isoforms:
    
    my @pairs;
    
    ## identify subclusters of relevant assemblies:
    for (my $i = 0; $i < $#assemblies; $i++) {
        
        my $i_align = $assemblies[$i];
        
        my $i_spliced_orientation = $i_align->get_spliced_orientation();
        
        for (my $j = $i+1; $j <= $#assemblies; $j++) {
            my $j_align = $assemblies[$j];
    
            my $j_spliced_orientation = $j_align->get_spliced_orientation();
            
            ## check for compatible spliced orientations.
            unless ($i_spliced_orientation eq $j_spliced_orientation) {
                next; #must have same spliced orientation
            }
            
            my ($i_lend, $i_rend) = sort {$a<=>$b} $i_align->get_coords();
            my ($j_lend, $j_rend) = sort {$a<=>$b} $j_align->get_coords();
            
            unless (&Overlap_info::overlap([$i_lend,$i_rend], [$j_lend,$j_rend])) {
                next;
            }

            
            my $i_length = $i_align->get_sum_alignment_segments_length();
            my $j_length = $j_align->get_sum_alignment_segments_length();
            
            my $sum_exon_overlap = &Overlap_info::sum_overlaps( [ &get_exon_coord_tupples($i_align) ],
                                                                [ &get_exon_coord_tupples($j_align) ] );
            
            my $shorter_iso_len = min($i_length, $j_length);

            my $pct_overlap = $sum_exon_overlap / $shorter_iso_len * 100;

            unless ($pct_overlap >= $MIN_PCT_OVERLAP) {
                next;
            }
                        
            ## passed test
            push (@pairs, [$i, $j]);
        }
    }
            
    ## Get sets of overlapping clusters
    my @clusters = &SingleLinkageClusterer::build_clusters(@pairs);
    
    
  group_isoforms: {
      my %seen;
      my @assembly_clusters; #contains refs to lists of alignment objs.
      foreach my $cluster (@clusters) {
          my @indices = @$cluster;
          
          my @assembly_cluster;
          foreach my $index (@indices) {
              my $align_obj = $assemblies[$index];
              $seen{$index} = 1;
              push (@assembly_cluster, $align_obj);
          }
          push (@assembly_clusters, [@assembly_cluster]);
      }

      for (my $i = 0; $i <= $#assemblies; $i++) {
          unless ($seen{$i}) {
              # add as a singleton
              push (@assembly_clusters, [ $assemblies[$i] ]);
          }
      }

      return(@assembly_clusters);
    }
    
}


####
sub get_exon_coord_tupples {
    my ($align_obj) = @_;

    my @alignment_segments = $align_obj->get_alignment_segments($align_obj);

    my @coord_tupples;
    foreach my $align_seg (@alignment_segments) {
        my ($lend, $rend) = sort {$a<=>$b} $align_seg->get_coords();

        push (@coord_tupples, [$lend, $rend]);
    }

    return(@coord_tupples);
}


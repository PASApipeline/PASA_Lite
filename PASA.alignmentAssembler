#!/usr/bin/env perl

use strict;
use warnings;
use threads;
use threads::shared;

use Carp;
use Getopt::Long qw(:config posix_default no_ignore_case bundling pass_through);

use FindBin;
use lib ("$FindBin::Bin/PerlLib");
use GFF3_alignment_utils;
use GTF_alignment_utils;
use Overlap_piler;
use Fasta_reader;
use SingleLinkageClusterer;
use CDNA::PASA_alignment_assembler;
use CDNA::Genome_based_cDNA_assembler;
use Overlap_info;
use List::Util qw(min max);

use Thread_helper;


my $help_flag;


my $usage = <<__EOUSAGE__;

#####################################################################

 usage: $0  --genome genome.fasta [opts] Trinity_gmap.gff3 [Cufflinks.gtf ...]


######################################################################################################
#
#  Required:
#
#   --genome <string>                    : genome.fasta
#
#  Optional:
#
#   --CPU <int>                          : max number of concurrent threads (default: 2)
#
#
#   --transcribed_is_aligned_orient      : flag, indicating strand-specific and transcripts 
#                                        already oriented accordingly.  (default, not 
#                                        trusting aligned orientation, define transcribed 
#                                        orient based on splicing patterns.)
# 
#   --discard_unspliced_transcripts      :flag, any unspliced transcript alignment is set to invalid.
#
#   --out_prefix <string>                : prefix for output file names (default: 'pasa_lite')
#
#   --min_pct_iso_shared_sequence <int>  : minimum percent of shared exon shared between two isoforms
#                                          to be joined into the same gene cluster.
#                                          min_pct = ( shared_seq_len / shorter_isoform_len) * 100
#                                          (default: 20)
#
#   --min_per_id <float>                 : min average percent identity of an alignment (default: 95)
#
#  Note: As is the PASA tradition, spliced transcripts having non-consensus dinucleotide splice sites
#        are  treated as invalid.   (accepted pairs restricted to: GT-AG, GC-AG, and AT-AC)
#
#
######################################################################################################



__EOUSAGE__

    ;


my $genome_fasta;
my $transcribed_is_aligned_orient_flag = 0;
my $require_consensus_splicesites_flag = 0;
my $discard_unspliced_transcripts_flag = 0;
my $out_prefix = "pasa_lite";
my $MIN_PCT_OVERLAP = 20;
my $CPU = 2;
my $min_per_id = 95;

&GetOptions ( 'h' => \$help_flag,
              'genome=s' => \$genome_fasta,
              'transcribed_is_aligned_orient' => \$transcribed_is_aligned_orient_flag,
              'require_consensus_splicesites' => \$require_consensus_splicesites_flag,
              'discard_unspliced_transcripts' => \$discard_unspliced_transcripts_flag,
              'out_prefix=s' => \$out_prefix,
              'min_pct_iso_shared_sequence=i' => \$MIN_PCT_OVERLAP,
              'CPU=i' => \$CPU,
              'min_per_id=f' => \$min_per_id,
    );


my @unrecognized_args = grep { ! /\.(gtf|gff3)$/ } @ARGV;

if (@unrecognized_args) {
    die "Error, don't recognize arguments: [@unrecognized_args] as prog options or gtf, gff3 files... ";
}

my @gxf_files = @ARGV;


if ($help_flag) {
    die $usage;
}

unless ($genome_fasta && @gxf_files) {
    die $usage;
}


my $invalid_lock : shared;
my $valid_lock : shared;
my $assembled_lock : shared;




main: {

    my %cdna_alignments;
    my %scaff_to_cdna_list;
    
    foreach my $gxf_file (@gxf_files) {
        &add_cdna_alignments($gxf_file, \%cdna_alignments, \%scaff_to_cdna_list);
    }

    ## Perform validations, assign spliced orientation
    my $fasta_reader = new Fasta_reader($genome_fasta);
    my %genome_seqs = $fasta_reader->retrieve_all_seqs_hash();
    

    ## prep outfiles, flush all filehandles after writes, no buffering since could cause problems w/ threads
    open (my $ofh_invalid_alignments, ">$out_prefix.invalid_alignments.gtf") or die $!;
    my $stdout = select $ofh_invalid_alignments;
    $|=1;
    open (my $ofh_valid_alignments, ">$out_prefix.valid_alignments.gtf") or die $!;
    select($ofh_valid_alignments);
    $|=1;
    open (my $ofh_assembled_alignments, ">$out_prefix.pasa_assembled_alignments.gtf") or die $!;
    select $ofh_assembled_alignments;
    $|=1;

    select $stdout;
    
    
       
    my %all_FHs = (invalid => $ofh_invalid_alignments,
                   valid => $ofh_valid_alignments,
                   assembled => $ofh_assembled_alignments,
        
        );
    

    my $thread_helper = new Thread_helper($CPU);

    foreach my $scaff (keys %scaff_to_cdna_list) {
        
        my $cdna_ids_aref = $scaff_to_cdna_list{$scaff};
        
        my $genome_seq = $genome_seqs{$scaff};
        
        $thread_helper->wait_for_open_thread();

        my $thread = threads->create('run_pasa', $scaff, $cdna_ids_aref, \$genome_seq, \%cdna_alignments, \%all_FHs);
        $thread_helper->add_thread($thread);
    }
    
    $thread_helper->wait_for_all_threads_to_complete();

    # close ofhs
    foreach my $ofh (values %all_FHs) {
        close $ofh;
    }
    
    my @failures = $thread_helper->get_failed_threads();
        
    if (@failures) {
        
        use Data::Dumper;
        print STDERR "Failed threads: " . Dumper(\@failures);
        
        die " errors encountered ";
        
    }
    else {
        print STDERR "\nAssembly complete. :)  \n\n";
    }
    
        
    exit(0);
    
    
}


####
sub run_pasa {
    my ($scaff, $cdna_ids_aref, $genome_seq_sref, $cdna_alignments_href, $all_FHs_href) = @_;

    &validate_transcript_alignments($cdna_ids_aref, $genome_seq_sref, $cdna_alignments_href); # also redefine spliced orientation
    
    my @clustered_isoforms = &cluster_transcripts($cdna_ids_aref, $cdna_alignments_href);
    
    &assemble_clusters($scaff, \@clustered_isoforms, $cdna_alignments_href, $cdna_ids_aref, $all_FHs_href);

    return;

}



####
sub assemble_clusters {
    my ($scaff, $clustered_isoforms_aref, $cdna_alignments_href, $cdna_ids_aref, $all_FHs_href) = @_;
    
    my $invalid_fh = $all_FHs_href->{invalid};
    my $valid_fh = $all_FHs_href->{valid};
    my $assembled_fh = $all_FHs_href->{assembled};


    my @all_assemblies;

    my %seen;
    
    my $gene_counter = 0;

    foreach my $cluster (@$clustered_isoforms_aref) {
        my @trans_ids = @$cluster;
        
        my @cdna_alignments_to_assemble;
        foreach my $trans_id (@trans_ids) {
            my $cdna_alignment_obj = $cdna_alignments_href->{$trans_id};
            
            $gene_counter++;
            
            if (my $errors_text = $cdna_alignment_obj->get_error_flag()) {
                # report in invalid set
                lock $invalid_lock;
                
                print $invalid_fh "# $trans_id " . $cdna_alignment_obj->toToken() . " ERROR: $errors_text\n"
                    . $cdna_alignment_obj->to_GTF_format(gene_id => "$scaff.g$gene_counter",
                                                         source => $cdna_alignment_obj->{source},
                    ) . "\n";
            }
            else {
                
                lock $valid_lock;

                print $valid_fh "# $trans_id " . $cdna_alignment_obj->toToken() . "\n"
                    . $cdna_alignment_obj->to_GTF_format(gene_id => "$scaff.g$gene_counter",
                                                         source => $cdna_alignment_obj->{source},
                    ) . "\n";

                
                push (@cdna_alignments_to_assemble, $cdna_alignment_obj);
            }
                        
            $seen{$trans_id} = 1;
        }
        
        if (scalar @cdna_alignments_to_assemble > 1) {
            my $assembler = new CDNA::PASA_alignment_assembler();
            
            $assembler->assemble_alignments(@cdna_alignments_to_assemble);
            
            #print $assembler->toAlignIllustration(80);
            #print "\n\n\n";
            
            my @assemblies = $assembler->get_assemblies();
            
            my @clustered_assemblies = &cluster_assemblies_via_exon_overlap(@assemblies);

            foreach my $assembly_set (@clustered_assemblies) {
                
                $gene_counter++; # ensure each assembly set shares the same gene ID
                
                if (scalar @$assembly_set > 1) {
                    print STDERR "******  Got Alt splicing involving: " . scalar(@$assembly_set) . " transcripts\n";
                
                    my $assembler = new CDNA::Genome_based_cDNA_assembler;
                    $assembler->{incoming_alignments} = [@$assembly_set];
                    $assembler->{assemblies} = [@$assembly_set];
                    print STDERR $assembler->toAlignIllustration();
                    

                }
                
                my $iso_counter = 0;
                
                foreach my $assembly (@$assembly_set) {
                    
                    $iso_counter++;
                    
                    my $acc = $assembly->get_acc();
                    $assembly->{genome_acc} = $scaff;
                    
                    print "ASSEMBLY: " . $assembly->toToken() . "\t$acc\n";
                    
                    lock $assembled_lock;
            
                    
                    my $trans_id = "$scaff.g$gene_counter.i$iso_counter";
        
                    print $assembled_fh "# $trans_id => $acc " . $assembly->toToken() . "\n"
                        . $assembly->to_GTF_format(gene_id => "$scaff.g$gene_counter",
                                                   transcript_id => $trans_id,
                        ) 
                        . "\n";
                }
            }
        }
        elsif (@cdna_alignments_to_assemble == 1) {
            ## just report the transcript itself, no assembly required
            
            my $cdna_alignment_obj = shift @cdna_alignments_to_assemble;
            
            my $acc = $cdna_alignment_obj->get_acc();
            
            lock $assembled_lock;
            
            print $assembled_fh "# $acc " . $cdna_alignment_obj->toToken() . "\n"
                . $cdna_alignment_obj->to_GTF_format(gene_id => "$scaff.g$gene_counter") . "\n";
                        
        }
                
    }
    
    
    ## Report those singletons that do not require assembly
  singletons: {
      
      foreach my $cdna_acc (@$cdna_ids_aref) {
          
          unless ($seen{$cdna_acc}) {
            
              $gene_counter++;
  
              my $cdna_alignment_obj = $cdna_alignments_href->{$cdna_acc};
              
              if (my $errors_text = $cdna_alignment_obj->get_error_flag()) {
                  
                  lock $invalid_lock;
                  
                  print $invalid_fh "# $cdna_acc " . $cdna_alignment_obj->toToken() . " ERROR: $errors_text\n"
                      . $cdna_alignment_obj->to_GTF_format(gene_id => "$scaff.g$gene_counter",
                                                           source => $cdna_alignment_obj->{source},
                      ) . "\n"; 
              }
              else {
                  
                  {
                      lock $assembled_lock;
                      
                      print $assembled_fh "# $cdna_acc " . $cdna_alignment_obj->toToken() . "\n"
                          . $cdna_alignment_obj->to_GTF_format(gene_id => "$scaff.g$gene_counter") . "\n";
                  }
                  
                  {
                      lock $valid_lock;
                      
                      print $valid_fh "# $cdna_acc " . $cdna_alignment_obj->toToken() . "\n"
                          . $cdna_alignment_obj->to_GTF_format(gene_id => "$scaff.g$gene_counter",
                                                               source => $cdna_alignment_obj->source(),
                          ) . "\n";
                  }
              }
          }
          
          
          
      }
      
    }
    
    return;
}



####
sub validate_transcript_alignments {
    my ($cdna_ids_aref, $genome_seq_sref, $cdna_alignments_href) = @_;
    
    foreach my $cdna_acc (@$cdna_ids_aref) {

        my $cdna_alignment_obj = $cdna_alignments_href->{$cdna_acc};
        
        if ($transcribed_is_aligned_orient_flag) {
            $cdna_alignment_obj->set_spliced_orientation( $cdna_alignment_obj->get_aligned_orientation() );
        }
        
        
        if ($cdna_alignment_obj->get_num_segments() > 1) {
            $cdna_alignment_obj->identify_splice_junctions($genome_seq_sref);
        }
        else {
            # single-exon alignment
            if ($discard_unspliced_transcripts_flag) {
                $cdna_alignment_obj->set_error_flag("single-segment alignment invalid due to --discard_unspliced_transcripts param set");
            }
        }

        # check percent identity
        
        my $per_id = $cdna_alignment_obj->get_avg_per_id();
        if (defined($per_id) && $per_id < $min_per_id) {
            $cdna_alignment_obj->set_error_flag("avg per_id $per_id < min required ($min_per_id)");
        }
        

    }
    
    return;

}



####
sub add_cdna_alignments {
    my ($gxf_file, $cdna_alignments_href, $scaff_to_cdna_list_href) = @_;
    
    my %local_scaff_to_gene_list;

    if ($gxf_file =~ /\.gtf$/i) {
        %local_scaff_to_gene_list = &GTF_alignment_utils::index_alignment_objs($gxf_file, $cdna_alignments_href);
    }
    elsif ($gxf_file =~ /\.gff3$/i) {
        %local_scaff_to_gene_list = &GFF3_alignment_utils::index_alignment_objs($gxf_file, $cdna_alignments_href);
    }

    ## tack them on to our master list
    foreach my $scaff (keys %local_scaff_to_gene_list) {
        my @ids = @{$local_scaff_to_gene_list{$scaff}};
        
        push (@{$scaff_to_cdna_list_href->{$scaff}}, @ids);
    }
    
    return;
}
        

####
sub cluster_transcripts {
    my ($cdna_ids_aref, $cdna_alignments_href) = @_;

    my $overlap_piler = new Overlap_piler();
    
    foreach my $cdna_acc (@$cdna_ids_aref) {
        
        my $alignment_obj = $cdna_alignments_href->{$cdna_acc};
        
        my @segments = $alignment_obj->get_alignment_segments();
        foreach my $segment (@segments) {
            my ($lend, $rend) = $segment->get_coords();
            $overlap_piler->add_coordSet($cdna_acc, $lend, $rend);
        }
    }

    my @clustered_accs = $overlap_piler->build_clusters();

    
    my @pairs;
    
    foreach my $cluster (@clustered_accs) {
        for (my $i = 1; $i <= $#$cluster; $i++) {
            my $prev = $cluster->[$i-1];
            my $curr = $cluster->[$i];
            
            push (@pairs, [$prev, $curr]);
        }
    }

    my @sl_clusters = &SingleLinkageClusterer::build_clusters(@pairs);
    
    return(@sl_clusters);
}


####
sub cluster_assemblies_via_exon_overlap {
    my (@assemblies) = @_;

    if (scalar @assemblies == 1) {
        # return a cluster of size 1.
        my @clusters = ([@assemblies]);
        return(@clusters);
    }
    
    ## multiple assemblies to test as isoforms:
    
    my @pairs;
    
    ## identify subclusters of relevant assemblies:
    for (my $i = 0; $i < $#assemblies; $i++) {
        
        my $i_align = $assemblies[$i];
        
        my $i_spliced_orientation = $i_align->get_spliced_orientation();
        
        for (my $j = $i+1; $j <= $#assemblies; $j++) {
            my $j_align = $assemblies[$j];
    
            my $j_spliced_orientation = $j_align->get_spliced_orientation();
            
            ## check for compatible spliced orientations.
            unless ($i_spliced_orientation eq $j_spliced_orientation) {
                next; #must have same spliced orientation
            }
            
            my ($i_lend, $i_rend) = sort {$a<=>$b} $i_align->get_coords();
            my ($j_lend, $j_rend) = sort {$a<=>$b} $j_align->get_coords();
            
            unless (&Overlap_info::overlap([$i_lend,$i_rend], [$j_lend,$j_rend])) {
                next;
            }

            
            my $i_length = $i_align->get_sum_alignment_segments_length();
            my $j_length = $j_align->get_sum_alignment_segments_length();
            
            my $sum_exon_overlap = &Overlap_info::sum_overlaps( [ &get_exon_coord_tupples($i_align) ],
                                                                [ &get_exon_coord_tupples($j_align) ] );
            
            my $shorter_iso_len = min($i_length, $j_length);

            my $pct_overlap = $sum_exon_overlap / $shorter_iso_len * 100;

            unless ($pct_overlap >= $MIN_PCT_OVERLAP) {
                next;
            }
                        
            ## passed test
            push (@pairs, [$i, $j]);
        }
    }
            
    ## Get sets of overlapping clusters
    my @clusters = &SingleLinkageClusterer::build_clusters(@pairs);
    
    
  group_isoforms: {
      my %seen;
      my @assembly_clusters; #contains refs to lists of alignment objs.
      foreach my $cluster (@clusters) {
          my @indices = @$cluster;
          
          my @assembly_cluster;
          foreach my $index (@indices) {
              my $align_obj = $assemblies[$index];
              $seen{$index} = 1;
              push (@assembly_cluster, $align_obj);
          }
          push (@assembly_clusters, [@assembly_cluster]);
      }

      for (my $i = 0; $i <= $#assemblies; $i++) {
          unless ($seen{$i}) {
              # add as a singleton
              push (@assembly_clusters, [ $assemblies[$i] ]);
          }
      }

      return(@assembly_clusters);
    }
    
}


####
sub get_exon_coord_tupples {
    my ($align_obj) = @_;

    my @alignment_segments = $align_obj->get_alignment_segments($align_obj);

    my @coord_tupples;
    foreach my $align_seg (@alignment_segments) {
        my ($lend, $rend) = sort {$a<=>$b} $align_seg->get_coords();

        push (@coord_tupples, [$lend, $rend]);
    }

    return(@coord_tupples);
}

